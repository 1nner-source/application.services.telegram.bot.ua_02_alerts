import requests
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import  ConversationHandler, CallbackContext
from utils.constants import WEATHER_API_KEY, BASE_ALERTS_API_URL, API_KEY, states, CHOOSING_STATE

def start(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –±–æ—Ç. –ù–∞–ø–∏—à–∏ /help —â–æ–± –ø–æ–¥–∏–≤–∏—Ç–∏—Å—å –¥–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏.')

def help_command(update: Update, context: CallbackContext) -> None:
    update.message.reply_text('–í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n'
                              '/start - –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –±–æ—Ç–∞\n'
                              '/help - –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ–ø–æ–º–æ–≥—É\n'
                              '/alert - –ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è'
                              '/set_city <city_name> - –ù–∞–ª–∞—à—Ç—É–π—Ç–µ —Å–≤–æ—î –º—ñ—Å—Ç–æ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏\n'
                              '/weather - –û—Ç—Ä–∏–º—É–π—Ç–µ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–≥–æ–¥–∏ —É –≤–∞—à–æ–º—É –º—ñ—Å—Ç—ñ'
                              '/choose_state - –û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –æ–±–ª–∞—Å—Ç—å')
    
def choose_state(update: Update, context: CallbackContext) -> int:
    keyboard = [
        [f"{state['name']} ({state['id']})"] for state in states
    ]
    update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞ –æ–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é –æ–±–ª–∞—Å—Ç—å:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    )
    return CHOOSING_STATE    

# * The alarm is received from this API https://alerts.com.ua/, it is planned to switch to the official API https://www.ukrainealarm.com/
def received_state(update: Update, context: CallbackContext) -> int:
    user_input = update.message.text

    # Extract the selected state's ID from the user's input
    selected_state_id = next((state['id'] for state in states if f"({state['id']})" in user_input), None)

    if selected_state_id:
        # Construct the API URL using the selected state's ID
        state_api_url = f"{BASE_ALERTS_API_URL}{selected_state_id}"
        
        # Make API request with the constructed URL
        response = requests.get(state_api_url, headers={"X-API-Key": API_KEY})

        if response.status_code == 200:
            alert_data = response.json()
            alert_state = alert_data.get('state')
            if alert_state and alert_state.get('alert'):
                name = alert_state.get('name')
                update.message.reply_text(f"üö® –£–≤–∞–≥–∞! –ü–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ —É {name}!")
            else:
                pass
        else:
            pass

        return ConversationHandler.END

    update.message.reply_text("–ù–µ–¥—ñ–π—Å–Ω–∏–π –≤–∏–±—ñ—Ä –æ–±–ª–∞—Å—Ç—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–ª–∞—Å—Ç—å —ñ–∑ –Ω–∞–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.")
    return CHOOSING_STATE


def set_city(update: Update, context: CallbackContext) -> None:
    city = ' '.join(context.args)
    if city:
        context.user_data['city'] = city
        update.message.reply_text(f'–í–∞—à–µ –º—ñ—Å—Ç–æ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –Ω–∞ {city}')
    else:
        update.message.reply_text('–£–∫–∞–∂—ñ—Ç—å –¥—ñ–π—Å–Ω—É –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞')

def weather(update: Update, context: CallbackContext) -> None:
    if 'city' in context.user_data:
        city = context.user_data['city']
        # Here, you can trigger the job with the city information
        job = context.job_queue.run_once(fetch_data, 0, context=update.message.chat_id, city=city)
        update.message.reply_text(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–æ–≥–æ–¥—É –¥–ª—è {city}...")
    else:
        update.message.reply_text('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å —Å–≤–æ—î –º—ñ—Å—Ç–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–æ–º–∞–Ω–¥–∏ /set_city')  

# * Test function for obtaining weather data for the city selected by the user. 
# * This api doesn't work with such parameters, because it's' not the city that needs to be transferred, 
# * but rather its longitude/latitude parameters
def fetch_data(context: CallbackContext) -> None:
    job = context.job
    if 'city' in job.context:  # Check if 'city' data is already stored in job context
        city = job.context['city']
        weather_api_url = f"https://api.weatherapi.com/v1/current.json?key={WEATHER_API_KEY}&q={city}"
        response = requests.get(weather_api_url)
        if response.status_code == 200:
            weather_data = response.json()
            temperature = weather_data['current']['temp_c']
            context.bot.send_message(job.context['chat_id'], f"–ü–æ—Ç–æ—á–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ {city} - {temperature}¬∞C.")
        else:
            context.bot.send_message(job.context['chat_id'], '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É.')
    else:
        context.bot.send_message(job.context['chat_id'], '–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –º—ñ—Å—Ç–æ.')

def cancel(update: Update, context: CallbackContext) -> int:
    update.message.reply_text("Cancelled.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END